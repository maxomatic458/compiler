import "../std/io.mx"
import "../std/collections/list.mx"

def reverse(s: String) for String -> String {
    let mut result = "";
    let length = s.len;
    let mut i = length - 1;

    while i >= 0 {
        result = result + s[i];
        i = i - 1;
    }

    return result;
}

def is_palindrome(s: String) for String -> bool {
    return s == s.reverse();
}

def min(self, other: int) for int -> int {
    if self < other {
        return self;
    } else {
        return other;
    }
}

def levensthein_distance(s1: String, s2: String) -> int {
    let mut matrix = List::new<List<int>>();

    let mut i = 0;
    while i < s1.len + 1 {
        let mut row = List::new<int>();
        let mut j = 0;
        while j < s2.len + 1 {
            if i == 0 {
                row.push(j);
            } else if j == 0 {
                row.push(i);
            } else {
                row.push(0);
            }
            j = j + 1;
        }
        matrix.push(row);
        i = i + 1;
    }

    let mut i = 1;
    while i < s1.len + 1 {
        let mut j = 1;
        while j < s2.len + 1 {
            let mut cost = 0;

            let char1 = s1[i - 1];
            let char2 = s2[j - 1];


            if char1 != char2 {
                cost = 1;
            }
            
            matrix[i][j] = (matrix[i - 1][j - 1] + cost).min(matrix[i - 1][j] + 1).min(matrix[i][j - 1] + 1);
            j = j + 1;
        }
        i = i + 1;
    }

    return matrix[s1.len][s2.len];
}

def main() -> int {
    println(("Hello" == "World").to_string());
    
    println("Hello World!".reverse());

    println("Hello World!".is_palindrome().to_string()); 

    println(levensthein_distance("hand", "wand").to_string());

    return 0;
}